{"version":3,"sources":["components/Button.jsx","components/EmptyButton.jsx","components/Input.jsx","components/ClearButton.jsx","App.js","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","className","concat","val","children","isNaN","onClick","handleClick","EmptyButton","handleEmpty","Input","label","input","ClearButton","handleClear","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addToInput","setState","state","history","console","log","handleEqual","math","calculated","localStorage","setItem","JSON","stringify","error","alert","handleMultiply","replace","handlereverse","result","key","hasOwnProperty","value","getItem","parse","e","clear","_this2","Fragment","style","color","split","map","textAlign","margin","padding","fontSize","Input_Input","EmptyButton_EmptyButton","ClearButton_ClearButton","Button_Button","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c5858734.chunk.js","sourcesContent":["import React from 'react';\nimport './Button.css';\n\nconst isOperator = val => {\n    return !isNaN(val) || val === \".\" || val === \" \";\n}\n\nexport const Button = props => (\n    <div className={props.className+ ' '+`btn-wrapper ${\n        isOperator(props.children) ? null : \"operator\"\n    }`}\n    onClick={() => props.handleClick(props.children)}>\n        {props.children}\n    </div>\n)\n\nexport default Button;","import React from 'react';\nimport './Button.css';\nexport const EmptyButton = (props) => (\n    <div className=\"btn-wrapper\" onClick={props.handleEmpty}>\n        {props.children}\n    </div>\n)\n\nexport default EmptyButton;","import React from 'react';\nimport './Input.css';\n\nexport const Input = (props) => (\n    \n    <div className=\"input\">\n        {props.label}<br /> {props.input } \n    </div>\n)\n\nexport default Input;","import React from 'react';\nimport './ClearButton.css';\n\nexport const ClearButton = (props) => (\n    <div className=\"clear-btn\" onClick={props.handleClear}>\n        {props.children}\n    </div>\n)\n\nexport default ClearButton","import React, { Component } from 'react';\nimport './App.css';\nimport { Button } from './components/Button';\nimport { EmptyButton } from './components/EmptyButton';\n\nimport { Input } from './components/Input';\nimport { ClearButton } from './components/ClearButton';\nimport * as math from 'mathjs';\nlet record;\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"\",\n      history:\"\",\n      calculated:false\n    }\n  }\n\n  addToInput = val => {\n    this.setState({input: this.state.input + val});\n    this.setState({history: this.state.history + val});\n    console.log('history:',this.state.history);\n  }\n\n  \n\n  handleEqual = () => {\n      try {\n        this.setState({ input: math.eval(this.state.input) });\n        this.setState(\n          {\n            history: this.state.history + '=,'+math.eval(this.state.input) + ',',\n            calculated:true,\n          },\n          ()=>{\n            this.setState({\n              input:''\n            })\n          }\n        );\n        localStorage.setItem('history', JSON.stringify( this.state.history) );\n        this.setState({calculated:false});\n      } catch (error) {\n        alert(\"invalid input\")\n        return error\n      }\n        \n\n\n  }\n\n  handleMultiply = val => {\n    if (val === \"x\") {\n      this.setState({input: this.state.input + val.replace(\"x\", \"*\")});\n      this.setState({history: this.state.history + val});\n      console.log('history:',this.state.history);\n    }\n}\n  handlereverse = val => {\n    if (val === \"+/-\") {\n      var result = this.state.input*(-1);\n      this.setState({input: result});\n      this.setState({history: this.state.history + val});\n      console.log('history:',this.state.history);\n    }\n  }\n  componentDidMount() {\n\n    for (let key in this.state) {\n      // if the key exists in localStorage\n      if (localStorage.hasOwnProperty(key)) {\n        // get the key's value from localStorage\n        let value = localStorage.getItem(key);\n\n        // parse the localStorage string and setState\n        try {\n          value = JSON.parse(value);\n          this.setState({ history: value });\n        } catch (e) {\n          // handle empty string\n          this.setState({history: value });\n        }\n        console.log('const history:', value);\n        console.log('DID history:', this.state.history);\n      }\n    }\n\n    localStorage.clear()\n   \n    \n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"historySec\" style={{color:\"white\"}} >\n          History record\n          {}\n          {\n          record = this.state.history,\n          record.split(',').map((e)=>(\n            <p style={{textAlign:'right', margin:'0', padding:'0', fontSize:'10px'}}>\n              <Input input={e}  ></Input>\n            </p>\n          ))}\n        </div>\n        <div className=\"app\">\n          \n          <div className=\"calculator-wrapper-science\">\n          <Input></Input>\n            <div className=\"row\">\n              <EmptyButton handleEmpty={console.log('empty')} className=\"scienceGrey\">(</EmptyButton>\n              <EmptyButton handleEmpty={console.log('empty')}  className=\"scienceGrey\">)</EmptyButton>\n              <EmptyButton handleEmpty={console.log('empty')}  className=\"scienceGrey\">mc</EmptyButton>\n              <EmptyButton handleEmpty={console.log('empty')}  className=\"scienceGrey\">m+</EmptyButton>\n              <EmptyButton handleEmpty={console.log('empty')}  className=\"scienceGrey\">m-</EmptyButton>\n              <EmptyButton handleEmpty={console.log('empty')}  className=\"scienceGrey\">mr</EmptyButton>\n            </div>\n            <div className=\"row\">\n              <EmptyButton handleEmpty={console.log('empty')}  className=\"scienceGrey\">2<sup>incl</sup></EmptyButton>\n              <EmptyButton handleEmpty={console.log('empty')}  className=\"scienceGrey\">x<sup>2</sup></EmptyButton>\n              <EmptyButton handleEmpty={console.log('empty')}  className=\"scienceGrey\">x<sup>3</sup></EmptyButton>\n              <EmptyButton handleEmpty={console.log('empty')}  className=\"scienceGrey\">x<sup>y</sup></EmptyButton>\n              <EmptyButton handleEmpty={console.log('empty')}  className=\"scienceGrey\">e<sup>x</sup></EmptyButton>\n              <EmptyButton handleEmpty={console.log('empty')}  className=\"scienceGrey\">10<sup>x</sup></EmptyButton>\n            </div>\n            <div className=\"row\">\n              <EmptyButton handleEmpty={console.log('empty')}  className=\"scienceGrey\">1/x</EmptyButton>\n              <EmptyButton handleEmpty={console.log('empty')}  className=\"scienceGrey\">2√x</EmptyButton>\n              <EmptyButton handleEmpty={console.log('empty')}  className=\"scienceGrey\">3√x</EmptyButton>\n              <EmptyButton handleEmpty={console.log('empty')}  className=\"scienceGrey\">y√x</EmptyButton>\n              <EmptyButton handleEmpty={console.log('empty')}  className=\"scienceGrey\">ln</EmptyButton>\n              <EmptyButton handleEmpty={console.log('empty')}  className=\"scienceGrey\">log<sub>10</sub></EmptyButton>\n            </div>\n            <div className=\"row\">\n              <EmptyButton handleEmpty={console.log('empty')}  className=\"scienceGrey\">x!</EmptyButton>\n              <EmptyButton handleEmpty={console.log('empty')}  className=\"scienceGrey\">sin</EmptyButton>\n              <EmptyButton handleEmpty={console.log('empty')}  className=\"scienceGrey\">cos</EmptyButton>\n              <EmptyButton handleEmpty={console.log('empty')}  className=\"scienceGrey\">tan</EmptyButton>\n              <EmptyButton handleEmpty={console.log('empty')}  className=\"scienceGrey\">e</EmptyButton>\n              <EmptyButton handleEmpty={console.log('empty')}  className=\"scienceGrey\">EE</EmptyButton>\n            </div>\n            <div className=\"row\">\n              <EmptyButton handleEmpty={console.log('empty')}  className=\"scienceGrey\">Rad</EmptyButton>\n              <EmptyButton handleEmpty={console.log('empty')}  className=\"scienceGrey\">sinh</EmptyButton>\n              <EmptyButton handleEmpty={console.log('empty')}  className=\"scienceGrey\">cosh</EmptyButton>\n              <EmptyButton handleEmpty={console.log('empty')}  className=\"scienceGrey\">tanh</EmptyButton>\n              <EmptyButton handleEmpty={console.log('empty')}  className=\"scienceGrey\">π</EmptyButton>\n              <EmptyButton handleEmpty={console.log('empty')}  className=\"scienceGrey\">Rand</EmptyButton>\n            </div>\n          </div>\n          <div className=\"calculator-wrapper\">\n            <Input input={this.state.input}></Input>\n            <div className=\"row\">\n              <ClearButton handleClear={() => this.setState({input: \"\",history:this.state.history+\",\"})}>C</ClearButton>\n              <Button className=\"greyBtn\" handleClick={this.handlereverse}>+/-</Button>\n              <Button className=\"greyBtn\" handleClick={this.addToInput}>%</Button>\n              <Button handleClick={this.addToInput}>/</Button>\n            </div>\n            <div className=\"row\">\n              <Button handleClick={this.addToInput}>7</Button>\n              <Button handleClick={this.addToInput}>8</Button>\n              <Button handleClick={this.addToInput}>9</Button>\n              <Button handleClick={this.handleMultiply}>x</Button>\n            </div>\n            <div className=\"row\">\n              <Button handleClick={this.addToInput}>4</Button>\n              <Button handleClick={this.addToInput}>5</Button>\n              <Button handleClick={this.addToInput}>6</Button>\n              <Button handleClick={this.addToInput}>-</Button>\n            </div>\n            <div className=\"row\">\n              <Button handleClick={this.addToInput}>1</Button>\n              <Button handleClick={this.addToInput}>2</Button>\n              <Button handleClick={this.addToInput}>3</Button>\n              <Button handleClick={this.addToInput}>+</Button>\n            </div>\n            <div className=\"row\">\n              <Button className=\"lgCircle\" handleClick={this.addToInput}>0</Button>\n              <Button handleClick={this.addToInput}>.</Button>\n              <Button handleClick={\n                ()=>{\n                  this.handleEqual()\n                \n                  \n                }\n                \n                \n                }>=</Button>\n                {console.log(\"HIS after = empty input:\", this.state.history)}\n                {console.log(\"INPut after = empty input:\", this.state.input)}\n                {console.log(\"cal after = empty input:\", this.state.calculated)}\n            </div>\n            \n          </div>\n          \n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}